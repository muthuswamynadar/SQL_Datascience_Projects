*** DDL commands*********


use salesdata;


create table courses
(
course_id char(10),
course_name varchar (50),
mode_of_delivery varchar(20),
student_intake varchar(10),
Faculty varchar(10)
);

select * from swamy_courses;

alter table courses change column mode_of_delivery Delivery_Mode varchar(10);
alter table courses change column student_intake studentpurchase varchar(50);

alter table courses change column course_id student_id varchar(50);

alter table courses change column Faculty Campus varchar(30);

alter table courses drop column campus;

alter table courses rename to Swamy_courses;

alter table Swamy_courses add column Teaching varchar(20);


************************** Constraints *****************************

--> Primary Keys
--> Not Null
--> Foregin Key
--> Unique
--> Check
--> Default


^^^^^^^^^^^^^^ Using the NOt null & uniques in the tables ^^^^^^^^^^^^^^
use salesdata;
create table courses
(
Course_ID char(10) unique,
Course_name varchar(30) not null,
Delivery_mode varchar(15),
Students_Intake int,
Faculty varchar(30)
);

insert into courses values
('PW101','Data Analytics','Recroded',100,'Swamy');

insert into courses values
('PW102', 'Python for Beginners', 'Live', 120, 'Delhi'),
('PW103', 'SQL Mastery', 'Recorded', 80, 'Bangalore'),
('PW104', 'Machine Learning Basics', 'Live', 95, 'Chennai'),
('PW105', 'Power BI Advanced', 'Recorded', 110, 'Hyderabad'),
('PW106', 'Excel for Data Analysis', 'Live', 130, 'Pune'),
('PW107', 'Full Stack Web Development', 'Recorded', 115, 'Ahmedabad'),
('PW108', 'AWS Cloud Essentials', 'Live', 90, 'Jaipur'),
('PW109', 'Introduction to Cyber Security', 'Recorded', 105, 'Kolkata');

select * from courses;

 -- Using the duplicate & not null to add the values in data (which shows the eroor)
 insert into courses values
('PW101','' , 'Live', 120, 'Delhi');


^^^^^^^^^^^^^^ Using the check in the table ^^^^^^^^^^^^^^

>> use the check in constraints
use salesdata;
create table courses
(
Course_ID char(10) unique,
Course_name varchar(30) not null,
Delivery_mode varchar(15),

Students_Intake int check(Students_Intake >=90),
Faculty varchar(30)
);

insert into courses values
('PW101','Data Analytics','Recroded',100,'Swamy');

insert into courses values
('PW102', 'Python for Beginners', 'Live', 120, 'Delhi'),
('PW103', 'SQL Mastery', 'Recorded', 90, 'Bangalore'),
('PW104', 'Machine Learning Basics', 'Live', 95, 'Chennai'),
('PW105', 'Power BI Advanced', 'Recorded', 110, 'Hyderabad'),
('PW106', 'Excel for Data Analysis', 'Live', 130, 'Pune'),
('PW107', 'Full Stack Web Development', 'Recorded', 115, 'Ahmedabad'),
('PW108', 'AWS Cloud Essentials', 'Live', 90, 'Jaipur'),
('PW109', 'Introduction to Cyber Security', 'Recorded', 105, 'Kolkata');

select * from courses;

 -- Using the duplicate & not null to add the values in data (which shows the eroor)
insert into courses values
('PW111', 'Python for Beginners', 'Live', 200, 'Delhi');

^^^^^^^^^^^^^^ Using the Default in the table ^^^^^^^^^^^^^^

use salesdata;
create table courses
(
Course_ID char(10) unique,
Course_name varchar(30) not null,
Delivery_mode varchar(15) default("Offline"),
Students_Intake int check(Students_Intake >=90),
Faculty varchar(30)
);

insert into courses values
('PW101','Data Analytics','Recroded',100,'Swamy');

insert into courses values
('PW102', 'Python for Beginners', 'Live', 120, 'Delhi'),
('PW103', 'SQL Mastery', 'Recorded', 90, 'Bangalore'),
('PW104', 'Machine Learning Basics', '', 95, 'Chennai'),
('PW105', 'Power BI Advanced', 'Recorded', 110, 'Hyderabad'),
('PW106', 'Excel for Data Analysis', '', 130, 'Pune'),
('PW107', 'Full Stack Web Development', 'Recorded', 115, 'Ahmedabad'),
('PW108', 'AWS Cloud Essentials', 'Live', 90, 'Jaipur'),
('PW109', 'Introduction to Cyber Security', 'Recorded', 105, 'Kolkata');

select * from courses;

insert into courses values
('PW1011','Data Analytics',Null ,100,'Swamy');

 -- Using the duplicate & not null to add the values in data (which shows the eroor)
insert into courses values
('PW111', 'Python for Beginners', 'Live', 200, 'Delhi');

 ---------------------------------------->>>>>>>>>>>>>> The output will always be null



****************************************************** DML means inserting the values
****************************************************** DQL means select query the values


****************************************************** Limit & offset

Limit means top 5
Offset skip beginning

select * from courses
limit 12
offset 5;


****************************************************** Order by


create database sort;

use sort;
create table courses
(Course_id Char(6) unique, 
Course_Name Varchar(40), 
Domain Char(20),
Students_Intake int, 
Mode_of_Delivery Varchar(20),
Faculty Varchar(30)); 

select * from courses
order by Course_id desc, Students_intake;

insert into courses values
("DS1001","Full Stack Data Science","Data Science",100,"Live","Saurabh"),
("DA1001","Full Stack Data Analytics","Data Analytics",70,"Live","Saurabh"),
("ML1001","Machine Learning Fundamentals","Machine Learning",170,"Hybrid","Subhash"),
("DL1001","Deepth of Deep Learning","Deep Learning",120,"Recorded","Nalini");


****************************************************** Where by

use sort;


select * from courses;

select * from courses
where Students_Intake>=100
order by Students_Intake;

-- using not equal to 

select * from courses
where Students_Intake <>100
order by Students_Intake;

****************************************************** Where by + Logical

use sort;


select * from courses;

select * from courses
where Students_Intake>=100
order by Students_Intake;

-- using not equal to 

select * from courses
where Students_Intake <>100
order by Students_Intake;

****************************************************** using the in operator

select * from courses
where course_name in ("Full Stack Data Science","Machine Learning Fundamentals");

insert into courses values
("DS121","Full Stack Data Science","Data Science",100,"Live","Saurabh"),
("DS111","Full Stack Data Science","Data Science",100,"Live","Saurabh");

****************************************************** using the between operator

select * from courses
where students_intake between 70 and 130;

****************************************************** using the like operator


use sort;

select * from courses;

select * from courses
where course_name like "M%";

select * from courses
where course_name like "%s";

****************************************************** Built in functions

Aggregates funtions
	Sum
	Min
	Max
	Average
	Count
	Count Dist
	Statistical
	Other ( group by)


select * from courses;

select sum(students_intake) as mylevel, min(students_intake) as mins from courses;


****************************************************** Group by


select * from courses;

select sum(students_intake) as mylevel, min(students_intake) as mins from courses;

select domain, count(domain) asmydomain, count(distinct domain), round(avg(students_intake)) 
from courses
group by domain
having count(domain) > 2;


****************************************************** String Functions

# String functions

-- Concat
-- Replace
-- Left/Right
-- Upper/Lower
-- Substring
-- TRim /LTrim /RTrinm
-- Reverse
-- Length 



use sort;

-- Using the concat

select * from courses;
select course_name,Domain, concat(Course_name," + ",Mode_of_Delivery) as fulldetails
from courses;

-- Using the Upper / Lower

select upper(course_name) as lm,lower(course_name) as ls
from courses;

-- Using the replace

select replace("Hello World","World","Mysql")as newo;

-- Using the left / right

select * from courses;

select course_id, left(course_name,8) from courses;

select course_id, right(course_name,8) from courses;

-- using the substring
select *,substring(course_name,1,7) as zz from courses;

-- using the trim ,left trim & right trim
select trim(concat("                        ","Swamy"));

-- Using the reverse
select * from courses;

select reverse(course_name) as mycourse from courses;

-- Using the length
select length(course_name) as myleng from courses;


****************************************************** Logical operations

-- 1) If
-- 2) Null-if
-- 3) If null
-- 4) Casc+ when
-- 5) coalsce

-- 1) IF

use sort;

select * from courses;

select 
	if(Max(Students_Intake) >= 100,"The RIght","Below Expected") as collegestatus,
	course_name,count(students_intake) as lmr
from courses
group by course_name;

-- 2) If null

SELECT course_name, domain , 
	ifnull(course_id) as nnz
FROM courses;

-- 3) Null-if

SELECT course_name, domain , 
	nullif(course_id) as nnz
FROM courses;


-- 4) Casc+ when
select course_name,domain,students_intake,
case
	when students_intake <= 70 then "High"
    when students_intake between 70 and 150 then "mid"
    else "Very hight"
end as pop_cat
from courses;

-- 5) coalesce
select students_intake,coalesce(students_intake,3) as imi
from courses;


****************************************************** Date & Time Functions

select current_date();

select current_time();

select current_timestamp() // Date+Time

select date(datez) as  mydate,Time(mytime) as mytime
from myworld;


****************************************************** Windows functions

-------> using the Row number

use sort;

Select * from courses;

select course_name, course_id, row_number() over (partition by course_name order by course_id) as row_num
from courses;


select course_name, course_id, rank() over (partition by course_name order by course_id) as row_num
, dense_rank() over (partition by course_name order by course_id) as Dense_num
from courses;


-------> using the Ntile

## NTILE
-- It divides into 4 category

select * from courses;
select *, ntile(5) over (order by Domain) as mydom from courses;


## using the lead
select *, lead(Domain,2) over (order by Domain) as mydom from courses;


****************************************************** Numeric functions

## Absolute functions
	select abs(-32) as abs;

## Ceil functions (next integer will return)
	select ceil(3.3);

## floor fucntion (always lower)
	select floor(33.9);

## Round Functions
	select round(23.33333333333);

## Mod functions (diveds 32 by 10 ) shows the remainder
	select mod(32,10);
	select mod (99,4);

## Power functions
	select power(3,2);

## Exponenetial functions
	select exp(3);


****************************************************** Joins

-- 1) inner join
-- 2) Left join
-- 3) right join
-- 4) Full join























































































































































